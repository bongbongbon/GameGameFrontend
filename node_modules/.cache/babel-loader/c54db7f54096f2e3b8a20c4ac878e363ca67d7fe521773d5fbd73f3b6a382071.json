{"ast":null,"code":"var _jsxFileName = \"/Users/kimsubong/Desktop/GameGameFrontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\n// src/contexts/AuthContext.js\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport axiosInstance from '../contexts/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  // const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // const fetchUser = async (token) => {\n    //   try {\n    //     const response = await axiosInstance.post('/api/auth/me', {}, {\n    //       headers: {\n    //         'Authorization': `Bearer ${token}`\n    //       }\n    //     });\n    //     console.log(response.data);\n    //     setUser(response.data);\n    //   } catch (error) {\n    //     console.error('Failed to fetch current user:', error);\n    //   } finally {\n    //     setLoading(false);\n    //   }\n    // };\n\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUser(token);\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await axiosInstance.post('/api/v1/auth/login', {\n        email,\n        password\n      });\n      localStorage.setItem('token', response.data.token);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    window.location.href = '/'; // 로그인 페이지로 리다이렉트\n  };\n\n  // 새로고침 시에 로그인과 회원가입 버튼이 잠깐씩 보이는 문제는, user 상태가 로드되기 전에 렌더링이 이루어지기 때문입니다.\n  // 이 문제를 해결하기 위해 로딩 상태를 추가하고, user 상태가 null이 아닌지 확인한 후에 렌더링을 하도록 수정할 수 있습니다.\n\n  if (loading) {\n    return null; // 새로고침 하면 로그인 회원가입 버튼이 왔다갔다하는 현상 때문에 설정\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"J7PPXooW06IQ11rfabbvgk72KFw=\");\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","loading","setLoading","token","localStorage","getItem","fetchUser","login","email","password","response","post","setItem","data","error","logout","removeItem","setUser","window","location","href","Provider","value","user","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kimsubong/Desktop/GameGameFrontend/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport axiosInstance from '../contexts/axiosInstance';\n\nconst AuthContext = createContext();\n\nconst AuthProvider = ({ children }) => {\n  // const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n\n  useEffect(() => {\n    // const fetchUser = async (token) => {\n    //   try {\n    //     const response = await axiosInstance.post('/api/auth/me', {}, {\n    //       headers: {\n    //         'Authorization': `Bearer ${token}`\n    //       }\n    //     });\n    //     console.log(response.data);\n    //     setUser(response.data);\n    //   } catch (error) {\n    //     console.error('Failed to fetch current user:', error);\n    //   } finally {\n    //     setLoading(false);\n    //   }\n    // };\n\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUser(token);\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      const response = await axiosInstance.post('/api/v1/auth/login', { email, password });\n      localStorage.setItem('token', response.data.token);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    window.location.href = '/'; // 로그인 페이지로 리다이렉트\n  };\n\n  // 새로고침 시에 로그인과 회원가입 버튼이 잠깐씩 보이는 문제는, user 상태가 로드되기 전에 렌더링이 이루어지기 때문입니다.\n  // 이 문제를 해결하기 위해 로딩 상태를 추가하고, user 상태가 null이 아닌지 확인한 후에 렌더링을 하도록 수정할 수 있습니다.\n  \n\n  if (loading) {\n    return null; // 새로고침 하면 로그인 회원가입 버튼이 왔다갔다하는 현상 때문에 설정\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport { AuthContext, AuthProvider };"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,aAAa,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAG5CC,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTG,SAAS,CAACH,KAAK,CAAC;IAClB,CAAC,MAAM;MACLD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,IAAI,CAAC,oBAAoB,EAAE;QAAEH,KAAK;QAAEC;MAAS,CAAC,CAAC;MACpFL,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACV,KAAK,CAAC;IACpD,CAAC,CAAC,OAAOW,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAGD,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChCC,OAAO,CAAC,IAAI,CAAC;IACbC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG,CAAC,CAAC;EAC9B,CAAC;;EAED;EACA;;EAGA,IAAInB,OAAO,EAAE;IACX,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,oBACEL,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAEC,IAAI;MAAEhB,KAAK;MAAEQ;IAAO,CAAE;IAAAhB,QAAA,EAClDA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC3B,EAAA,CA3DIF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AA6DlB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}